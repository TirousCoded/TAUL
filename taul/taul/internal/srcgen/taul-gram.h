#pragma once
#include <optional>
#include "../../logger.h"
#include "../../grammar.h"
#if TAUL_SRCGEN_IMPLEMENTATION
#include "../../spec.h"
#include "../../load.h"
#endif

// write "#define TAUL_SRCGEN_IMPLEMENTATION 1" in a *.cpp file to host the implementation,
// placing it prior to the #include for the generated fetcher header file
namespace taul::fetchers {
    taul::grammar taul() noexcept;
}

#if TAUL_SRCGEN_IMPLEMENTATION
static taul::grammar _TAUL_SRCGEN_init_taul() {
    auto lgr = taul::make_stderr_logger();
    taul::spec_writer sw{};
    sw.pos(505);
    sw.lpr_decl(taul::str::lit("END_OF_KW"));
    sw.pos(605);
    sw.lpr_decl(taul::str::lit("KW_LEXER"));
    sw.pos(664);
    sw.lpr_decl(taul::str::lit("KW_PARSER"));
    sw.pos(724);
    sw.lpr_decl(taul::str::lit("KW_SECTION"));
    sw.pos(785);
    sw.lpr_decl(taul::str::lit("KW_SKIP"));
    sw.pos(843);
    sw.lpr_decl(taul::str::lit("KW_SUPPORT"));
    sw.pos(904);
    sw.lpr_decl(taul::str::lit("KW_END"));
    sw.pos(961);
    sw.lpr_decl(taul::str::lit("KW_ANY"));
    sw.pos(1018);
    sw.lpr_decl(taul::str::lit("KW_TOKEN"));
    sw.pos(1077);
    sw.lpr_decl(taul::str::lit("KW_FAILURE"));
    sw.pos(1163);
    sw.lpr_decl(taul::str::lit("OP_PERIOD"));
    sw.pos(1208);
    sw.lpr_decl(taul::str::lit("OP_COLON"));
    sw.pos(1253);
    sw.lpr_decl(taul::str::lit("OP_SEMICOLON"));
    sw.pos(1298);
    sw.lpr_decl(taul::str::lit("OP_VBAR"));
    sw.pos(1343);
    sw.lpr_decl(taul::str::lit("OP_QUESTION"));
    sw.pos(1388);
    sw.lpr_decl(taul::str::lit("OP_ASTERISK"));
    sw.pos(1433);
    sw.lpr_decl(taul::str::lit("OP_PLUS"));
    sw.pos(1478);
    sw.lpr_decl(taul::str::lit("OP_AMPERSAND"));
    sw.pos(1523);
    sw.lpr_decl(taul::str::lit("OP_MINUS"));
    sw.pos(1568);
    sw.lpr_decl(taul::str::lit("OP_TILDE"));
    sw.pos(1613);
    sw.lpr_decl(taul::str::lit("OP_L_ROUND"));
    sw.pos(1658);
    sw.lpr_decl(taul::str::lit("OP_R_ROUND"));
    sw.pos(1722);
    sw.lpr_decl(taul::str::lit("IDENTIFIER"));
    sw.pos(3192);
    sw.lpr_decl(taul::str::lit("STRING"));
    sw.pos(5114);
    sw.lpr_decl(taul::str::lit("CHARSET"));
    sw.pos(5190);
    sw.lpr_decl(taul::str::lit("WHITESPACE"));
    sw.pos(5238);
    sw.lpr_decl(taul::str::lit("NEWLINE"));
    sw.pos(5299);
    sw.lpr_decl(taul::str::lit("COMMENT"));
    sw.pos(6289);
    sw.ppr_decl(taul::str::lit("Spec"));
    sw.pos(6344);
    sw.ppr_decl(taul::str::lit("Clause"));
    sw.pos(6501);
    sw.ppr_decl(taul::str::lit("LexerSection"));
    sw.pos(6571);
    sw.ppr_decl(taul::str::lit("ParserSection"));
    sw.pos(6644);
    sw.ppr_decl(taul::str::lit("Rule"));
    sw.pos(6743);
    sw.ppr_decl(taul::str::lit("Rule_Qualifiers"));
    sw.pos(6795);
    sw.ppr_decl(taul::str::lit("Rule_Name"));
    sw.pos(6847);
    sw.ppr_decl(taul::str::lit("Rule_Alts"));
    sw.pos(6895);
    sw.ppr_decl(taul::str::lit("Qualifiers"));
    sw.pos(6947);
    sw.ppr_decl(taul::str::lit("Qualifier"));
    sw.pos(7060);
    sw.ppr_decl(taul::str::lit("Qualifier_Skip"));
    sw.pos(7109);
    sw.ppr_decl(taul::str::lit("Qualifier_Support"));
    sw.pos(8049);
    sw.ppr_decl(taul::str::lit("Expr"));
    sw.pos(8103);
    sw.ppr_decl(taul::str::lit("Expr_NoSuffix"));
    sw.pos(8151);
    sw.ppr_decl(taul::str::lit("Base"));
    sw.pos(8392);
    sw.ppr_decl(taul::str::lit("Suffix"));
    sw.pos(8565);
    sw.ppr_decl(taul::str::lit("Primary"));
    sw.pos(8884);
    sw.ppr_decl(taul::str::lit("End"));
    sw.pos(8932);
    sw.ppr_decl(taul::str::lit("Any"));
    sw.pos(8980);
    sw.ppr_decl(taul::str::lit("Token"));
    sw.pos(9030);
    sw.ppr_decl(taul::str::lit("Failure"));
    sw.pos(9082);
    sw.ppr_decl(taul::str::lit("String"));
    sw.pos(9130);
    sw.ppr_decl(taul::str::lit("Charset"));
    sw.pos(9179);
    sw.ppr_decl(taul::str::lit("Name"));
    sw.pos(9233);
    sw.ppr_decl(taul::str::lit("Sequence"));
    sw.pos(9310);
    sw.ppr_decl(taul::str::lit("Sequence_Alts"));
    sw.pos(9358);
    sw.ppr_decl(taul::str::lit("LookAhead"));
    sw.pos(9426);
    sw.ppr_decl(taul::str::lit("LookAheadNot"));
    sw.pos(9490);
    sw.ppr_decl(taul::str::lit("Not"));
    sw.pos(9556);
    sw.ppr_decl(taul::str::lit("Optional_Suffix"));
    sw.pos(9609);
    sw.ppr_decl(taul::str::lit("KleeneStar_Suffix"));
    sw.pos(9662);
    sw.ppr_decl(taul::str::lit("KleenePlus_Suffix"));
    sw.pos(9786);
    sw.ppr_decl(taul::str::lit("Alts"));
    sw.pos(9852);
    sw.ppr_decl(taul::str::lit("Alt_Divider"));
    sw.pos(9901);
    sw.ppr_decl(taul::str::lit("Alt"));
    sw.pos(505);
    sw.lpr(taul::str::lit("END_OF_KW"), taul::qualifier::support);
    sw.pos(505);
    sw.lookahead_not();
    sw.pos(506);
    sw.charset(taul::str::lit("0-9a-zA-Z_"));
    sw.pos(505);
    sw.close();
    sw.pos(556);
    sw.alternative();
    sw.pos(558);
    sw.end();
    sw.pos(505);
    sw.close();
    sw.pos(605);
    sw.lpr(taul::str::lit("KW_LEXER"), taul::qualifier::none);
    sw.pos(605);
    sw.string(taul::str::lit("lexer"));
    sw.pos(613);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(605);
    sw.close();
    sw.pos(664);
    sw.lpr(taul::str::lit("KW_PARSER"), taul::qualifier::none);
    sw.pos(664);
    sw.string(taul::str::lit("parser"));
    sw.pos(673);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(664);
    sw.close();
    sw.pos(724);
    sw.lpr(taul::str::lit("KW_SECTION"), taul::qualifier::none);
    sw.pos(724);
    sw.string(taul::str::lit("section"));
    sw.pos(734);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(724);
    sw.close();
    sw.pos(785);
    sw.lpr(taul::str::lit("KW_SKIP"), taul::qualifier::none);
    sw.pos(785);
    sw.string(taul::str::lit("skip"));
    sw.pos(792);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(785);
    sw.close();
    sw.pos(843);
    sw.lpr(taul::str::lit("KW_SUPPORT"), taul::qualifier::none);
    sw.pos(843);
    sw.string(taul::str::lit("support"));
    sw.pos(853);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(843);
    sw.close();
    sw.pos(904);
    sw.lpr(taul::str::lit("KW_END"), taul::qualifier::none);
    sw.pos(904);
    sw.string(taul::str::lit("end"));
    sw.pos(910);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(904);
    sw.close();
    sw.pos(961);
    sw.lpr(taul::str::lit("KW_ANY"), taul::qualifier::none);
    sw.pos(961);
    sw.string(taul::str::lit("any"));
    sw.pos(967);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(961);
    sw.close();
    sw.pos(1018);
    sw.lpr(taul::str::lit("KW_TOKEN"), taul::qualifier::none);
    sw.pos(1018);
    sw.string(taul::str::lit("token"));
    sw.pos(1026);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(1018);
    sw.close();
    sw.pos(1077);
    sw.lpr(taul::str::lit("KW_FAILURE"), taul::qualifier::none);
    sw.pos(1077);
    sw.string(taul::str::lit("failure"));
    sw.pos(1087);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(1077);
    sw.close();
    sw.pos(1163);
    sw.lpr(taul::str::lit("OP_PERIOD"), taul::qualifier::none);
    sw.pos(1163);
    sw.string(taul::str::lit("."));
    sw.pos(1163);
    sw.close();
    sw.pos(1208);
    sw.lpr(taul::str::lit("OP_COLON"), taul::qualifier::none);
    sw.pos(1208);
    sw.string(taul::str::lit(":"));
    sw.pos(1208);
    sw.close();
    sw.pos(1253);
    sw.lpr(taul::str::lit("OP_SEMICOLON"), taul::qualifier::none);
    sw.pos(1253);
    sw.string(taul::str::lit(";"));
    sw.pos(1253);
    sw.close();
    sw.pos(1298);
    sw.lpr(taul::str::lit("OP_VBAR"), taul::qualifier::none);
    sw.pos(1298);
    sw.string(taul::str::lit("|"));
    sw.pos(1298);
    sw.close();
    sw.pos(1343);
    sw.lpr(taul::str::lit("OP_QUESTION"), taul::qualifier::none);
    sw.pos(1343);
    sw.string(taul::str::lit("?"));
    sw.pos(1343);
    sw.close();
    sw.pos(1388);
    sw.lpr(taul::str::lit("OP_ASTERISK"), taul::qualifier::none);
    sw.pos(1388);
    sw.string(taul::str::lit("*"));
    sw.pos(1388);
    sw.close();
    sw.pos(1433);
    sw.lpr(taul::str::lit("OP_PLUS"), taul::qualifier::none);
    sw.pos(1433);
    sw.string(taul::str::lit("+"));
    sw.pos(1433);
    sw.close();
    sw.pos(1478);
    sw.lpr(taul::str::lit("OP_AMPERSAND"), taul::qualifier::none);
    sw.pos(1478);
    sw.string(taul::str::lit("&"));
    sw.pos(1478);
    sw.close();
    sw.pos(1523);
    sw.lpr(taul::str::lit("OP_MINUS"), taul::qualifier::none);
    sw.pos(1523);
    sw.string(taul::str::lit("-"));
    sw.pos(1523);
    sw.close();
    sw.pos(1568);
    sw.lpr(taul::str::lit("OP_TILDE"), taul::qualifier::none);
    sw.pos(1568);
    sw.string(taul::str::lit("~"));
    sw.pos(1568);
    sw.close();
    sw.pos(1613);
    sw.lpr(taul::str::lit("OP_L_ROUND"), taul::qualifier::none);
    sw.pos(1613);
    sw.string(taul::str::lit("("));
    sw.pos(1613);
    sw.close();
    sw.pos(1658);
    sw.lpr(taul::str::lit("OP_R_ROUND"), taul::qualifier::none);
    sw.pos(1658);
    sw.string(taul::str::lit(")"));
    sw.pos(1658);
    sw.close();
    sw.pos(1722);
    sw.lpr(taul::str::lit("IDENTIFIER"), taul::qualifier::none);
    sw.pos(1722);
    sw.charset(taul::str::lit("a-zA-Z_"));
    sw.pos(1744);
    sw.kleene_star();
    sw.pos(1732);
    sw.charset(taul::str::lit("0-9a-zA-Z_"));
    sw.pos(1744);
    sw.close();
    sw.pos(1722);
    sw.close();
    sw.pos(3192);
    sw.lpr(taul::str::lit("STRING"), taul::qualifier::none);
    sw.pos(3192);
    sw.string(taul::str::lit("\\'"));
    sw.pos(3219);
    sw.kleene_star();
    sw.pos(3197);
    sw.sequence();
    sw.pos(3199);
    sw.string(taul::str::lit("\\\\"));
    sw.pos(3204);
    sw.any();
    sw.pos(3208);
    sw.alternative();
    sw.pos(3210);
    sw.not0();
    sw.pos(3211);
    sw.charset(taul::str::lit("\\'\\\\"));
    sw.pos(3210);
    sw.close();
    sw.pos(3197);
    sw.close();
    sw.pos(3219);
    sw.close();
    sw.pos(3225);
    sw.optional();
    sw.pos(3221);
    sw.string(taul::str::lit("\\'"));
    sw.pos(3225);
    sw.close();
    sw.pos(3192);
    sw.close();
    sw.pos(5114);
    sw.lpr(taul::str::lit("CHARSET"), taul::qualifier::none);
    sw.pos(5114);
    sw.string(taul::str::lit("["));
    sw.pos(5140);
    sw.kleene_star();
    sw.pos(5118);
    sw.sequence();
    sw.pos(5120);
    sw.string(taul::str::lit("\\\\"));
    sw.pos(5125);
    sw.any();
    sw.pos(5129);
    sw.alternative();
    sw.pos(5131);
    sw.not0();
    sw.pos(5132);
    sw.charset(taul::str::lit("\\]\\\\"));
    sw.pos(5131);
    sw.close();
    sw.pos(5118);
    sw.close();
    sw.pos(5140);
    sw.close();
    sw.pos(5145);
    sw.optional();
    sw.pos(5142);
    sw.string(taul::str::lit("]"));
    sw.pos(5145);
    sw.close();
    sw.pos(5114);
    sw.close();
    sw.pos(5190);
    sw.lpr(taul::str::lit("WHITESPACE"), taul::qualifier::skip);
    sw.pos(5195);
    sw.kleene_plus();
    sw.pos(5190);
    sw.charset(taul::str::lit(" \\t"));
    sw.pos(5195);
    sw.close();
    sw.pos(5190);
    sw.close();
    sw.pos(5238);
    sw.lpr(taul::str::lit("NEWLINE"), taul::qualifier::skip);
    sw.pos(5238);
    sw.string(taul::str::lit("\\n"));
    sw.pos(5243);
    sw.alternative();
    sw.pos(5245);
    sw.string(taul::str::lit("\\r"));
    sw.pos(5254);
    sw.optional();
    sw.pos(5250);
    sw.string(taul::str::lit("\\n"));
    sw.pos(5254);
    sw.close();
    sw.pos(5238);
    sw.close();
    sw.pos(5299);
    sw.lpr(taul::str::lit("COMMENT"), taul::qualifier::skip);
    sw.pos(5299);
    sw.string(taul::str::lit("#"));
    sw.pos(5310);
    sw.kleene_star();
    sw.pos(5303);
    sw.not0();
    sw.pos(5304);
    sw.charset(taul::str::lit("\\r\\n"));
    sw.pos(5303);
    sw.close();
    sw.pos(5310);
    sw.close();
    sw.pos(5299);
    sw.close();
    sw.pos(6289);
    sw.ppr(taul::str::lit("Spec"), taul::qualifier::none);
    sw.pos(6295);
    sw.kleene_star();
    sw.pos(6289);
    sw.name(taul::str::lit("Clause"));
    sw.pos(6295);
    sw.close();
    sw.pos(6297);
    sw.end();
    sw.pos(6289);
    sw.close();
    sw.pos(6344);
    sw.ppr(taul::str::lit("Clause"), taul::qualifier::none);
    sw.pos(6344);
    sw.name(taul::str::lit("LexerSection"));
    sw.pos(6394);
    sw.alternative();
    sw.pos(6396);
    sw.name(taul::str::lit("ParserSection"));
    sw.pos(6447);
    sw.alternative();
    sw.pos(6449);
    sw.name(taul::str::lit("Rule"));
    sw.pos(6344);
    sw.close();
    sw.pos(6501);
    sw.ppr(taul::str::lit("LexerSection"), taul::qualifier::none);
    sw.pos(6501);
    sw.name(taul::str::lit("KW_LEXER"));
    sw.pos(6510);
    sw.name(taul::str::lit("KW_SECTION"));
    sw.pos(6521);
    sw.name(taul::str::lit("OP_COLON"));
    sw.pos(6501);
    sw.close();
    sw.pos(6571);
    sw.ppr(taul::str::lit("ParserSection"), taul::qualifier::none);
    sw.pos(6571);
    sw.name(taul::str::lit("KW_PARSER"));
    sw.pos(6581);
    sw.name(taul::str::lit("KW_SECTION"));
    sw.pos(6592);
    sw.name(taul::str::lit("OP_COLON"));
    sw.pos(6571);
    sw.close();
    sw.pos(6644);
    sw.ppr(taul::str::lit("Rule"), taul::qualifier::none);
    sw.pos(6644);
    sw.name(taul::str::lit("Rule_Qualifiers"));
    sw.pos(6660);
    sw.name(taul::str::lit("Rule_Name"));
    sw.pos(6670);
    sw.name(taul::str::lit("OP_COLON"));
    sw.pos(6679);
    sw.name(taul::str::lit("Rule_Alts"));
    sw.pos(6689);
    sw.name(taul::str::lit("OP_SEMICOLON"));
    sw.pos(6644);
    sw.close();
    sw.pos(6743);
    sw.ppr(taul::str::lit("Rule_Qualifiers"), taul::qualifier::none);
    sw.pos(6743);
    sw.name(taul::str::lit("Qualifiers"));
    sw.pos(6743);
    sw.close();
    sw.pos(6795);
    sw.ppr(taul::str::lit("Rule_Name"), taul::qualifier::none);
    sw.pos(6795);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(6795);
    sw.close();
    sw.pos(6847);
    sw.ppr(taul::str::lit("Rule_Alts"), taul::qualifier::none);
    sw.pos(6847);
    sw.name(taul::str::lit("Alts"));
    sw.pos(6847);
    sw.close();
    sw.pos(6895);
    sw.ppr(taul::str::lit("Qualifiers"), taul::qualifier::none);
    sw.pos(6904);
    sw.kleene_star();
    sw.pos(6895);
    sw.name(taul::str::lit("Qualifier"));
    sw.pos(6904);
    sw.close();
    sw.pos(6895);
    sw.close();
    sw.pos(6947);
    sw.ppr(taul::str::lit("Qualifier"), taul::qualifier::none);
    sw.pos(6947);
    sw.name(taul::str::lit("Qualifier_Skip"));
    sw.pos(6999);
    sw.alternative();
    sw.pos(7001);
    sw.name(taul::str::lit("Qualifier_Support"));
    sw.pos(6947);
    sw.close();
    sw.pos(7060);
    sw.ppr(taul::str::lit("Qualifier_Skip"), taul::qualifier::none);
    sw.pos(7060);
    sw.name(taul::str::lit("KW_SKIP"));
    sw.pos(7060);
    sw.close();
    sw.pos(7109);
    sw.ppr(taul::str::lit("Qualifier_Support"), taul::qualifier::none);
    sw.pos(7109);
    sw.name(taul::str::lit("KW_SUPPORT"));
    sw.pos(7109);
    sw.close();
    sw.pos(8049);
    sw.ppr(taul::str::lit("Expr"), taul::qualifier::none);
    sw.pos(8049);
    sw.name(taul::str::lit("Base"));
    sw.pos(8060);
    sw.kleene_star();
    sw.pos(8054);
    sw.name(taul::str::lit("Suffix"));
    sw.pos(8060);
    sw.close();
    sw.pos(8049);
    sw.close();
    sw.pos(8103);
    sw.ppr(taul::str::lit("Expr_NoSuffix"), taul::qualifier::none);
    sw.pos(8103);
    sw.name(taul::str::lit("Base"));
    sw.pos(8103);
    sw.close();
    sw.pos(8151);
    sw.ppr(taul::str::lit("Base"), taul::qualifier::none);
    sw.pos(8151);
    sw.name(taul::str::lit("Primary"));
    sw.pos(8196);
    sw.alternative();
    sw.pos(8198);
    sw.name(taul::str::lit("Sequence"));
    sw.pos(8244);
    sw.alternative();
    sw.pos(8246);
    sw.name(taul::str::lit("LookAhead"));
    sw.pos(8293);
    sw.alternative();
    sw.pos(8295);
    sw.name(taul::str::lit("LookAheadNot"));
    sw.pos(8345);
    sw.alternative();
    sw.pos(8347);
    sw.name(taul::str::lit("Not"));
    sw.pos(8151);
    sw.close();
    sw.pos(8392);
    sw.ppr(taul::str::lit("Suffix"), taul::qualifier::none);
    sw.pos(8392);
    sw.name(taul::str::lit("Optional_Suffix"));
    sw.pos(8445);
    sw.alternative();
    sw.pos(8447);
    sw.name(taul::str::lit("KleeneStar_Suffix"));
    sw.pos(8502);
    sw.alternative();
    sw.pos(8504);
    sw.name(taul::str::lit("KleenePlus_Suffix"));
    sw.pos(8392);
    sw.close();
    sw.pos(8565);
    sw.ppr(taul::str::lit("Primary"), taul::qualifier::none);
    sw.pos(8565);
    sw.name(taul::str::lit("End"));
    sw.pos(8606);
    sw.alternative();
    sw.pos(8608);
    sw.name(taul::str::lit("Any"));
    sw.pos(8649);
    sw.alternative();
    sw.pos(8651);
    sw.name(taul::str::lit("Token"));
    sw.pos(8694);
    sw.alternative();
    sw.pos(8696);
    sw.name(taul::str::lit("Failure"));
    sw.pos(8741);
    sw.alternative();
    sw.pos(8743);
    sw.name(taul::str::lit("String"));
    sw.pos(8787);
    sw.alternative();
    sw.pos(8789);
    sw.name(taul::str::lit("Charset"));
    sw.pos(8834);
    sw.alternative();
    sw.pos(8836);
    sw.name(taul::str::lit("Name"));
    sw.pos(8565);
    sw.close();
    sw.pos(8884);
    sw.ppr(taul::str::lit("End"), taul::qualifier::none);
    sw.pos(8884);
    sw.name(taul::str::lit("KW_END"));
    sw.pos(8884);
    sw.close();
    sw.pos(8932);
    sw.ppr(taul::str::lit("Any"), taul::qualifier::none);
    sw.pos(8932);
    sw.name(taul::str::lit("KW_ANY"));
    sw.pos(8932);
    sw.close();
    sw.pos(8980);
    sw.ppr(taul::str::lit("Token"), taul::qualifier::none);
    sw.pos(8980);
    sw.name(taul::str::lit("KW_TOKEN"));
    sw.pos(8980);
    sw.close();
    sw.pos(9030);
    sw.ppr(taul::str::lit("Failure"), taul::qualifier::none);
    sw.pos(9030);
    sw.name(taul::str::lit("KW_FAILURE"));
    sw.pos(9030);
    sw.close();
    sw.pos(9082);
    sw.ppr(taul::str::lit("String"), taul::qualifier::none);
    sw.pos(9082);
    sw.name(taul::str::lit("STRING"));
    sw.pos(9082);
    sw.close();
    sw.pos(9130);
    sw.ppr(taul::str::lit("Charset"), taul::qualifier::none);
    sw.pos(9130);
    sw.name(taul::str::lit("CHARSET"));
    sw.pos(9130);
    sw.close();
    sw.pos(9179);
    sw.ppr(taul::str::lit("Name"), taul::qualifier::none);
    sw.pos(9179);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(9179);
    sw.close();
    sw.pos(9233);
    sw.ppr(taul::str::lit("Sequence"), taul::qualifier::none);
    sw.pos(9233);
    sw.name(taul::str::lit("OP_L_ROUND"));
    sw.pos(9244);
    sw.name(taul::str::lit("Sequence_Alts"));
    sw.pos(9258);
    sw.name(taul::str::lit("OP_R_ROUND"));
    sw.pos(9233);
    sw.close();
    sw.pos(9310);
    sw.ppr(taul::str::lit("Sequence_Alts"), taul::qualifier::none);
    sw.pos(9310);
    sw.name(taul::str::lit("Alts"));
    sw.pos(9310);
    sw.close();
    sw.pos(9358);
    sw.ppr(taul::str::lit("LookAhead"), taul::qualifier::none);
    sw.pos(9358);
    sw.name(taul::str::lit("OP_AMPERSAND"));
    sw.pos(9371);
    sw.name(taul::str::lit("Expr_NoSuffix"));
    sw.pos(9358);
    sw.close();
    sw.pos(9426);
    sw.ppr(taul::str::lit("LookAheadNot"), taul::qualifier::none);
    sw.pos(9426);
    sw.name(taul::str::lit("OP_MINUS"));
    sw.pos(9435);
    sw.name(taul::str::lit("Expr_NoSuffix"));
    sw.pos(9426);
    sw.close();
    sw.pos(9490);
    sw.ppr(taul::str::lit("Not"), taul::qualifier::none);
    sw.pos(9490);
    sw.name(taul::str::lit("OP_TILDE"));
    sw.pos(9499);
    sw.name(taul::str::lit("Expr_NoSuffix"));
    sw.pos(9490);
    sw.close();
    sw.pos(9556);
    sw.ppr(taul::str::lit("Optional_Suffix"), taul::qualifier::none);
    sw.pos(9556);
    sw.name(taul::str::lit("OP_QUESTION"));
    sw.pos(9556);
    sw.close();
    sw.pos(9609);
    sw.ppr(taul::str::lit("KleeneStar_Suffix"), taul::qualifier::none);
    sw.pos(9609);
    sw.name(taul::str::lit("OP_ASTERISK"));
    sw.pos(9609);
    sw.close();
    sw.pos(9662);
    sw.ppr(taul::str::lit("KleenePlus_Suffix"), taul::qualifier::none);
    sw.pos(9662);
    sw.name(taul::str::lit("OP_PLUS"));
    sw.pos(9662);
    sw.close();
    sw.pos(9786);
    sw.ppr(taul::str::lit("Alts"), taul::qualifier::none);
    sw.pos(9786);
    sw.name(taul::str::lit("Alt"));
    sw.pos(9809);
    sw.kleene_star();
    sw.pos(9790);
    sw.sequence();
    sw.pos(9792);
    sw.name(taul::str::lit("Alt_Divider"));
    sw.pos(9804);
    sw.name(taul::str::lit("Alt"));
    sw.pos(9790);
    sw.close();
    sw.pos(9809);
    sw.close();
    sw.pos(9786);
    sw.close();
    sw.pos(9852);
    sw.ppr(taul::str::lit("Alt_Divider"), taul::qualifier::none);
    sw.pos(9852);
    sw.name(taul::str::lit("OP_VBAR"));
    sw.pos(9852);
    sw.close();
    sw.pos(9901);
    sw.ppr(taul::str::lit("Alt"), taul::qualifier::none);
    sw.pos(9905);
    sw.kleene_star();
    sw.pos(9901);
    sw.name(taul::str::lit("Expr"));
    sw.pos(9905);
    sw.close();
    sw.pos(9901);
    sw.close();
    auto loaded = taul::load(sw.done(), lgr);
    TAUL_LOG_IF(!loaded, lgr, "TAUL fetcher 'taul' backing data didn't initialize properly!");
    return loaded.value();
}
static const taul::grammar _TAUL_SRCGEN_taul_object = _TAUL_SRCGEN_init_taul();

taul::grammar taul::fetchers::taul() noexcept {
    return _TAUL_SRCGEN_taul_object;
}
#endif
#pragma once
#include <optional>
#include "../../logger.h"
#include "../../grammar.h"
#if TAUL_SRCGEN_IMPLEMENTATION
#include "../../spec.h"
#include "../../load.h"
#endif

// write "#define TAUL_SRCGEN_IMPLEMENTATION 1" in a *.cpp file to host the implementation,
// placing it prior to the #include for the generated fetcher header file
namespace taul::fetchers {
    taul::grammar taul() noexcept;
}

#if TAUL_SRCGEN_IMPLEMENTATION
static taul::grammar _TAUL_SRCGEN_init_taul() {
    auto lgr = taul::make_stderr_logger();
    taul::spec_writer sw{};
    sw.pos(505);
    sw.lpr_decl(taul::str::lit("END_OF_KW"));
    sw.pos(605);
    sw.lpr_decl(taul::str::lit("KW_LEXER"));
    sw.pos(664);
    sw.lpr_decl(taul::str::lit("KW_PARSER"));
    sw.pos(724);
    sw.lpr_decl(taul::str::lit("KW_SECTION"));
    sw.pos(785);
    sw.lpr_decl(taul::str::lit("KW_SKIP"));
    sw.pos(843);
    sw.lpr_decl(taul::str::lit("KW_SUPPORT"));
    sw.pos(904);
    sw.lpr_decl(taul::str::lit("KW_PRECEDENCE"));
    sw.pos(968);
    sw.lpr_decl(taul::str::lit("KW_END"));
    sw.pos(1025);
    sw.lpr_decl(taul::str::lit("KW_ANY"));
    sw.pos(1082);
    sw.lpr_decl(taul::str::lit("KW_TOKEN"));
    sw.pos(1141);
    sw.lpr_decl(taul::str::lit("KW_FAILURE"));
    sw.pos(1227);
    sw.lpr_decl(taul::str::lit("OP_PERIOD"));
    sw.pos(1272);
    sw.lpr_decl(taul::str::lit("OP_COLON"));
    sw.pos(1317);
    sw.lpr_decl(taul::str::lit("OP_SEMICOLON"));
    sw.pos(1362);
    sw.lpr_decl(taul::str::lit("OP_VBAR"));
    sw.pos(1407);
    sw.lpr_decl(taul::str::lit("OP_QUESTION"));
    sw.pos(1452);
    sw.lpr_decl(taul::str::lit("OP_ASTERISK"));
    sw.pos(1497);
    sw.lpr_decl(taul::str::lit("OP_PLUS"));
    sw.pos(1542);
    sw.lpr_decl(taul::str::lit("OP_AMPERSAND"));
    sw.pos(1587);
    sw.lpr_decl(taul::str::lit("OP_MINUS"));
    sw.pos(1632);
    sw.lpr_decl(taul::str::lit("OP_TILDE"));
    sw.pos(1677);
    sw.lpr_decl(taul::str::lit("OP_L_ROUND"));
    sw.pos(1722);
    sw.lpr_decl(taul::str::lit("OP_R_ROUND"));
    sw.pos(1786);
    sw.lpr_decl(taul::str::lit("IDENTIFIER"));
    sw.pos(3256);
    sw.lpr_decl(taul::str::lit("STRING"));
    sw.pos(5178);
    sw.lpr_decl(taul::str::lit("CHARSET"));
    sw.pos(5254);
    sw.lpr_decl(taul::str::lit("WHITESPACE"));
    sw.pos(5302);
    sw.lpr_decl(taul::str::lit("NEWLINE"));
    sw.pos(5363);
    sw.lpr_decl(taul::str::lit("COMMENT"));
    sw.pos(6353);
    sw.ppr_decl(taul::str::lit("Spec"));
    sw.pos(6408);
    sw.ppr_decl(taul::str::lit("Clause"));
    sw.pos(6565);
    sw.ppr_decl(taul::str::lit("LexerSection"));
    sw.pos(6635);
    sw.ppr_decl(taul::str::lit("ParserSection"));
    sw.pos(8001);
    sw.ppr_decl(taul::str::lit("Rule"));
    sw.pos(8100);
    sw.ppr_decl(taul::str::lit("Rule_Qualifiers"));
    sw.pos(8152);
    sw.ppr_decl(taul::str::lit("Rule_Name"));
    sw.pos(8204);
    sw.ppr_decl(taul::str::lit("Rule_Alts"));
    sw.pos(8252);
    sw.ppr_decl(taul::str::lit("Qualifiers"));
    sw.pos(8304);
    sw.ppr_decl(taul::str::lit("Qualifier"));
    sw.pos(8477);
    sw.ppr_decl(taul::str::lit("Qualifier_Skip"));
    sw.pos(8526);
    sw.ppr_decl(taul::str::lit("Qualifier_Support"));
    sw.pos(8578);
    sw.ppr_decl(taul::str::lit("Qualifier_Precedence"));
    sw.pos(9521);
    sw.ppr_decl(taul::str::lit("Expr"));
    sw.pos(9575);
    sw.ppr_decl(taul::str::lit("Expr_NoSuffix"));
    sw.pos(9623);
    sw.ppr_decl(taul::str::lit("Base"));
    sw.pos(9864);
    sw.ppr_decl(taul::str::lit("Suffix"));
    sw.pos(10037);
    sw.ppr_decl(taul::str::lit("Primary"));
    sw.pos(10356);
    sw.ppr_decl(taul::str::lit("End"));
    sw.pos(10404);
    sw.ppr_decl(taul::str::lit("Any"));
    sw.pos(10452);
    sw.ppr_decl(taul::str::lit("Token"));
    sw.pos(10502);
    sw.ppr_decl(taul::str::lit("Failure"));
    sw.pos(10554);
    sw.ppr_decl(taul::str::lit("String"));
    sw.pos(10602);
    sw.ppr_decl(taul::str::lit("Charset"));
    sw.pos(10651);
    sw.ppr_decl(taul::str::lit("Name"));
    sw.pos(10705);
    sw.ppr_decl(taul::str::lit("Sequence"));
    sw.pos(10782);
    sw.ppr_decl(taul::str::lit("Sequence_Alts"));
    sw.pos(10830);
    sw.ppr_decl(taul::str::lit("LookAhead"));
    sw.pos(10898);
    sw.ppr_decl(taul::str::lit("LookAheadNot"));
    sw.pos(10962);
    sw.ppr_decl(taul::str::lit("Not"));
    sw.pos(11028);
    sw.ppr_decl(taul::str::lit("Optional_Suffix"));
    sw.pos(11081);
    sw.ppr_decl(taul::str::lit("KleeneStar_Suffix"));
    sw.pos(11134);
    sw.ppr_decl(taul::str::lit("KleenePlus_Suffix"));
    sw.pos(11258);
    sw.ppr_decl(taul::str::lit("Alts"));
    sw.pos(11324);
    sw.ppr_decl(taul::str::lit("Alt_Divider"));
    sw.pos(11373);
    sw.ppr_decl(taul::str::lit("Alt"));
    sw.pos(505);
    sw.lpr(taul::str::lit("END_OF_KW"), taul::qualifier::support);
    sw.pos(505);
    sw.lookahead_not();
    sw.pos(506);
    sw.charset(taul::str::lit("0-9a-zA-Z_"));
    sw.pos(505);
    sw.close();
    sw.pos(556);
    sw.alternative();
    sw.pos(558);
    sw.end();
    sw.pos(505);
    sw.close();
    sw.pos(605);
    sw.lpr(taul::str::lit("KW_LEXER"), taul::qualifier::none);
    sw.pos(605);
    sw.string(taul::str::lit("lexer"));
    sw.pos(613);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(605);
    sw.close();
    sw.pos(664);
    sw.lpr(taul::str::lit("KW_PARSER"), taul::qualifier::none);
    sw.pos(664);
    sw.string(taul::str::lit("parser"));
    sw.pos(673);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(664);
    sw.close();
    sw.pos(724);
    sw.lpr(taul::str::lit("KW_SECTION"), taul::qualifier::none);
    sw.pos(724);
    sw.string(taul::str::lit("section"));
    sw.pos(734);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(724);
    sw.close();
    sw.pos(785);
    sw.lpr(taul::str::lit("KW_SKIP"), taul::qualifier::none);
    sw.pos(785);
    sw.string(taul::str::lit("skip"));
    sw.pos(792);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(785);
    sw.close();
    sw.pos(843);
    sw.lpr(taul::str::lit("KW_SUPPORT"), taul::qualifier::none);
    sw.pos(843);
    sw.string(taul::str::lit("support"));
    sw.pos(853);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(843);
    sw.close();
    sw.pos(904);
    sw.lpr(taul::str::lit("KW_PRECEDENCE"), taul::qualifier::none);
    sw.pos(904);
    sw.string(taul::str::lit("precedence"));
    sw.pos(917);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(904);
    sw.close();
    sw.pos(968);
    sw.lpr(taul::str::lit("KW_END"), taul::qualifier::none);
    sw.pos(968);
    sw.string(taul::str::lit("end"));
    sw.pos(974);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(968);
    sw.close();
    sw.pos(1025);
    sw.lpr(taul::str::lit("KW_ANY"), taul::qualifier::none);
    sw.pos(1025);
    sw.string(taul::str::lit("any"));
    sw.pos(1031);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(1025);
    sw.close();
    sw.pos(1082);
    sw.lpr(taul::str::lit("KW_TOKEN"), taul::qualifier::none);
    sw.pos(1082);
    sw.string(taul::str::lit("token"));
    sw.pos(1090);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(1082);
    sw.close();
    sw.pos(1141);
    sw.lpr(taul::str::lit("KW_FAILURE"), taul::qualifier::none);
    sw.pos(1141);
    sw.string(taul::str::lit("failure"));
    sw.pos(1151);
    sw.name(taul::str::lit("END_OF_KW"));
    sw.pos(1141);
    sw.close();
    sw.pos(1227);
    sw.lpr(taul::str::lit("OP_PERIOD"), taul::qualifier::none);
    sw.pos(1227);
    sw.string(taul::str::lit("."));
    sw.pos(1227);
    sw.close();
    sw.pos(1272);
    sw.lpr(taul::str::lit("OP_COLON"), taul::qualifier::none);
    sw.pos(1272);
    sw.string(taul::str::lit(":"));
    sw.pos(1272);
    sw.close();
    sw.pos(1317);
    sw.lpr(taul::str::lit("OP_SEMICOLON"), taul::qualifier::none);
    sw.pos(1317);
    sw.string(taul::str::lit(";"));
    sw.pos(1317);
    sw.close();
    sw.pos(1362);
    sw.lpr(taul::str::lit("OP_VBAR"), taul::qualifier::none);
    sw.pos(1362);
    sw.string(taul::str::lit("|"));
    sw.pos(1362);
    sw.close();
    sw.pos(1407);
    sw.lpr(taul::str::lit("OP_QUESTION"), taul::qualifier::none);
    sw.pos(1407);
    sw.string(taul::str::lit("?"));
    sw.pos(1407);
    sw.close();
    sw.pos(1452);
    sw.lpr(taul::str::lit("OP_ASTERISK"), taul::qualifier::none);
    sw.pos(1452);
    sw.string(taul::str::lit("*"));
    sw.pos(1452);
    sw.close();
    sw.pos(1497);
    sw.lpr(taul::str::lit("OP_PLUS"), taul::qualifier::none);
    sw.pos(1497);
    sw.string(taul::str::lit("+"));
    sw.pos(1497);
    sw.close();
    sw.pos(1542);
    sw.lpr(taul::str::lit("OP_AMPERSAND"), taul::qualifier::none);
    sw.pos(1542);
    sw.string(taul::str::lit("&"));
    sw.pos(1542);
    sw.close();
    sw.pos(1587);
    sw.lpr(taul::str::lit("OP_MINUS"), taul::qualifier::none);
    sw.pos(1587);
    sw.string(taul::str::lit("-"));
    sw.pos(1587);
    sw.close();
    sw.pos(1632);
    sw.lpr(taul::str::lit("OP_TILDE"), taul::qualifier::none);
    sw.pos(1632);
    sw.string(taul::str::lit("~"));
    sw.pos(1632);
    sw.close();
    sw.pos(1677);
    sw.lpr(taul::str::lit("OP_L_ROUND"), taul::qualifier::none);
    sw.pos(1677);
    sw.string(taul::str::lit("("));
    sw.pos(1677);
    sw.close();
    sw.pos(1722);
    sw.lpr(taul::str::lit("OP_R_ROUND"), taul::qualifier::none);
    sw.pos(1722);
    sw.string(taul::str::lit(")"));
    sw.pos(1722);
    sw.close();
    sw.pos(1786);
    sw.lpr(taul::str::lit("IDENTIFIER"), taul::qualifier::none);
    sw.pos(1786);
    sw.charset(taul::str::lit("a-zA-Z_"));
    sw.pos(1808);
    sw.kleene_star();
    sw.pos(1796);
    sw.charset(taul::str::lit("0-9a-zA-Z_"));
    sw.pos(1808);
    sw.close();
    sw.pos(1786);
    sw.close();
    sw.pos(3256);
    sw.lpr(taul::str::lit("STRING"), taul::qualifier::none);
    sw.pos(3256);
    sw.string(taul::str::lit("\\'"));
    sw.pos(3283);
    sw.kleene_star();
    sw.pos(3261);
    sw.sequence();
    sw.pos(3263);
    sw.string(taul::str::lit("\\\\"));
    sw.pos(3268);
    sw.any();
    sw.pos(3272);
    sw.alternative();
    sw.pos(3274);
    sw.not0();
    sw.pos(3275);
    sw.charset(taul::str::lit("\\'\\\\"));
    sw.pos(3274);
    sw.close();
    sw.pos(3261);
    sw.close();
    sw.pos(3283);
    sw.close();
    sw.pos(3289);
    sw.optional();
    sw.pos(3285);
    sw.string(taul::str::lit("\\'"));
    sw.pos(3289);
    sw.close();
    sw.pos(3256);
    sw.close();
    sw.pos(5178);
    sw.lpr(taul::str::lit("CHARSET"), taul::qualifier::none);
    sw.pos(5178);
    sw.string(taul::str::lit("["));
    sw.pos(5204);
    sw.kleene_star();
    sw.pos(5182);
    sw.sequence();
    sw.pos(5184);
    sw.string(taul::str::lit("\\\\"));
    sw.pos(5189);
    sw.any();
    sw.pos(5193);
    sw.alternative();
    sw.pos(5195);
    sw.not0();
    sw.pos(5196);
    sw.charset(taul::str::lit("\\]\\\\"));
    sw.pos(5195);
    sw.close();
    sw.pos(5182);
    sw.close();
    sw.pos(5204);
    sw.close();
    sw.pos(5209);
    sw.optional();
    sw.pos(5206);
    sw.string(taul::str::lit("]"));
    sw.pos(5209);
    sw.close();
    sw.pos(5178);
    sw.close();
    sw.pos(5254);
    sw.lpr(taul::str::lit("WHITESPACE"), taul::qualifier::skip);
    sw.pos(5259);
    sw.kleene_plus();
    sw.pos(5254);
    sw.charset(taul::str::lit(" \\t"));
    sw.pos(5259);
    sw.close();
    sw.pos(5254);
    sw.close();
    sw.pos(5302);
    sw.lpr(taul::str::lit("NEWLINE"), taul::qualifier::skip);
    sw.pos(5302);
    sw.string(taul::str::lit("\\n"));
    sw.pos(5307);
    sw.alternative();
    sw.pos(5309);
    sw.string(taul::str::lit("\\r"));
    sw.pos(5318);
    sw.optional();
    sw.pos(5314);
    sw.string(taul::str::lit("\\n"));
    sw.pos(5318);
    sw.close();
    sw.pos(5302);
    sw.close();
    sw.pos(5363);
    sw.lpr(taul::str::lit("COMMENT"), taul::qualifier::skip);
    sw.pos(5363);
    sw.string(taul::str::lit("#"));
    sw.pos(5374);
    sw.kleene_star();
    sw.pos(5367);
    sw.not0();
    sw.pos(5368);
    sw.charset(taul::str::lit("\\r\\n"));
    sw.pos(5367);
    sw.close();
    sw.pos(5374);
    sw.close();
    sw.pos(5363);
    sw.close();
    sw.pos(6353);
    sw.ppr(taul::str::lit("Spec"), taul::qualifier::none);
    sw.pos(6359);
    sw.kleene_star();
    sw.pos(6353);
    sw.name(taul::str::lit("Clause"));
    sw.pos(6359);
    sw.close();
    sw.pos(6361);
    sw.end();
    sw.pos(6353);
    sw.close();
    sw.pos(6408);
    sw.ppr(taul::str::lit("Clause"), taul::qualifier::none);
    sw.pos(6408);
    sw.name(taul::str::lit("LexerSection"));
    sw.pos(6458);
    sw.alternative();
    sw.pos(6460);
    sw.name(taul::str::lit("ParserSection"));
    sw.pos(6511);
    sw.alternative();
    sw.pos(6513);
    sw.name(taul::str::lit("Rule"));
    sw.pos(6408);
    sw.close();
    sw.pos(6565);
    sw.ppr(taul::str::lit("LexerSection"), taul::qualifier::none);
    sw.pos(6565);
    sw.name(taul::str::lit("KW_LEXER"));
    sw.pos(6574);
    sw.name(taul::str::lit("KW_SECTION"));
    sw.pos(6585);
    sw.name(taul::str::lit("OP_COLON"));
    sw.pos(6565);
    sw.close();
    sw.pos(6635);
    sw.ppr(taul::str::lit("ParserSection"), taul::qualifier::none);
    sw.pos(6635);
    sw.name(taul::str::lit("KW_PARSER"));
    sw.pos(6645);
    sw.name(taul::str::lit("KW_SECTION"));
    sw.pos(6656);
    sw.name(taul::str::lit("OP_COLON"));
    sw.pos(6635);
    sw.close();
    sw.pos(8001);
    sw.ppr(taul::str::lit("Rule"), taul::qualifier::none);
    sw.pos(8001);
    sw.name(taul::str::lit("Rule_Qualifiers"));
    sw.pos(8017);
    sw.name(taul::str::lit("Rule_Name"));
    sw.pos(8027);
    sw.name(taul::str::lit("OP_COLON"));
    sw.pos(8036);
    sw.name(taul::str::lit("Rule_Alts"));
    sw.pos(8046);
    sw.name(taul::str::lit("OP_SEMICOLON"));
    sw.pos(8001);
    sw.close();
    sw.pos(8100);
    sw.ppr(taul::str::lit("Rule_Qualifiers"), taul::qualifier::none);
    sw.pos(8100);
    sw.name(taul::str::lit("Qualifiers"));
    sw.pos(8100);
    sw.close();
    sw.pos(8152);
    sw.ppr(taul::str::lit("Rule_Name"), taul::qualifier::none);
    sw.pos(8152);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(8152);
    sw.close();
    sw.pos(8204);
    sw.ppr(taul::str::lit("Rule_Alts"), taul::qualifier::none);
    sw.pos(8204);
    sw.name(taul::str::lit("Alts"));
    sw.pos(8204);
    sw.close();
    sw.pos(8252);
    sw.ppr(taul::str::lit("Qualifiers"), taul::qualifier::none);
    sw.pos(8261);
    sw.kleene_star();
    sw.pos(8252);
    sw.name(taul::str::lit("Qualifier"));
    sw.pos(8261);
    sw.close();
    sw.pos(8252);
    sw.close();
    sw.pos(8304);
    sw.ppr(taul::str::lit("Qualifier"), taul::qualifier::none);
    sw.pos(8304);
    sw.name(taul::str::lit("Qualifier_Skip"));
    sw.pos(8356);
    sw.alternative();
    sw.pos(8358);
    sw.name(taul::str::lit("Qualifier_Support"));
    sw.pos(8413);
    sw.alternative();
    sw.pos(8415);
    sw.name(taul::str::lit("Qualifier_Precedence"));
    sw.pos(8304);
    sw.close();
    sw.pos(8477);
    sw.ppr(taul::str::lit("Qualifier_Skip"), taul::qualifier::none);
    sw.pos(8477);
    sw.name(taul::str::lit("KW_SKIP"));
    sw.pos(8477);
    sw.close();
    sw.pos(8526);
    sw.ppr(taul::str::lit("Qualifier_Support"), taul::qualifier::none);
    sw.pos(8526);
    sw.name(taul::str::lit("KW_SUPPORT"));
    sw.pos(8526);
    sw.close();
    sw.pos(8578);
    sw.ppr(taul::str::lit("Qualifier_Precedence"), taul::qualifier::none);
    sw.pos(8578);
    sw.name(taul::str::lit("KW_PRECEDENCE"));
    sw.pos(8578);
    sw.close();
    sw.pos(9521);
    sw.ppr(taul::str::lit("Expr"), taul::qualifier::none);
    sw.pos(9521);
    sw.name(taul::str::lit("Base"));
    sw.pos(9532);
    sw.kleene_star();
    sw.pos(9526);
    sw.name(taul::str::lit("Suffix"));
    sw.pos(9532);
    sw.close();
    sw.pos(9521);
    sw.close();
    sw.pos(9575);
    sw.ppr(taul::str::lit("Expr_NoSuffix"), taul::qualifier::none);
    sw.pos(9575);
    sw.name(taul::str::lit("Base"));
    sw.pos(9575);
    sw.close();
    sw.pos(9623);
    sw.ppr(taul::str::lit("Base"), taul::qualifier::none);
    sw.pos(9623);
    sw.name(taul::str::lit("Primary"));
    sw.pos(9668);
    sw.alternative();
    sw.pos(9670);
    sw.name(taul::str::lit("Sequence"));
    sw.pos(9716);
    sw.alternative();
    sw.pos(9718);
    sw.name(taul::str::lit("LookAhead"));
    sw.pos(9765);
    sw.alternative();
    sw.pos(9767);
    sw.name(taul::str::lit("LookAheadNot"));
    sw.pos(9817);
    sw.alternative();
    sw.pos(9819);
    sw.name(taul::str::lit("Not"));
    sw.pos(9623);
    sw.close();
    sw.pos(9864);
    sw.ppr(taul::str::lit("Suffix"), taul::qualifier::none);
    sw.pos(9864);
    sw.name(taul::str::lit("Optional_Suffix"));
    sw.pos(9917);
    sw.alternative();
    sw.pos(9919);
    sw.name(taul::str::lit("KleeneStar_Suffix"));
    sw.pos(9974);
    sw.alternative();
    sw.pos(9976);
    sw.name(taul::str::lit("KleenePlus_Suffix"));
    sw.pos(9864);
    sw.close();
    sw.pos(10037);
    sw.ppr(taul::str::lit("Primary"), taul::qualifier::none);
    sw.pos(10037);
    sw.name(taul::str::lit("End"));
    sw.pos(10078);
    sw.alternative();
    sw.pos(10080);
    sw.name(taul::str::lit("Any"));
    sw.pos(10121);
    sw.alternative();
    sw.pos(10123);
    sw.name(taul::str::lit("Token"));
    sw.pos(10166);
    sw.alternative();
    sw.pos(10168);
    sw.name(taul::str::lit("Failure"));
    sw.pos(10213);
    sw.alternative();
    sw.pos(10215);
    sw.name(taul::str::lit("String"));
    sw.pos(10259);
    sw.alternative();
    sw.pos(10261);
    sw.name(taul::str::lit("Charset"));
    sw.pos(10306);
    sw.alternative();
    sw.pos(10308);
    sw.name(taul::str::lit("Name"));
    sw.pos(10037);
    sw.close();
    sw.pos(10356);
    sw.ppr(taul::str::lit("End"), taul::qualifier::none);
    sw.pos(10356);
    sw.name(taul::str::lit("KW_END"));
    sw.pos(10356);
    sw.close();
    sw.pos(10404);
    sw.ppr(taul::str::lit("Any"), taul::qualifier::none);
    sw.pos(10404);
    sw.name(taul::str::lit("KW_ANY"));
    sw.pos(10404);
    sw.close();
    sw.pos(10452);
    sw.ppr(taul::str::lit("Token"), taul::qualifier::none);
    sw.pos(10452);
    sw.name(taul::str::lit("KW_TOKEN"));
    sw.pos(10452);
    sw.close();
    sw.pos(10502);
    sw.ppr(taul::str::lit("Failure"), taul::qualifier::none);
    sw.pos(10502);
    sw.name(taul::str::lit("KW_FAILURE"));
    sw.pos(10502);
    sw.close();
    sw.pos(10554);
    sw.ppr(taul::str::lit("String"), taul::qualifier::none);
    sw.pos(10554);
    sw.name(taul::str::lit("STRING"));
    sw.pos(10554);
    sw.close();
    sw.pos(10602);
    sw.ppr(taul::str::lit("Charset"), taul::qualifier::none);
    sw.pos(10602);
    sw.name(taul::str::lit("CHARSET"));
    sw.pos(10602);
    sw.close();
    sw.pos(10651);
    sw.ppr(taul::str::lit("Name"), taul::qualifier::none);
    sw.pos(10651);
    sw.name(taul::str::lit("IDENTIFIER"));
    sw.pos(10651);
    sw.close();
    sw.pos(10705);
    sw.ppr(taul::str::lit("Sequence"), taul::qualifier::none);
    sw.pos(10705);
    sw.name(taul::str::lit("OP_L_ROUND"));
    sw.pos(10716);
    sw.name(taul::str::lit("Sequence_Alts"));
    sw.pos(10730);
    sw.name(taul::str::lit("OP_R_ROUND"));
    sw.pos(10705);
    sw.close();
    sw.pos(10782);
    sw.ppr(taul::str::lit("Sequence_Alts"), taul::qualifier::none);
    sw.pos(10782);
    sw.name(taul::str::lit("Alts"));
    sw.pos(10782);
    sw.close();
    sw.pos(10830);
    sw.ppr(taul::str::lit("LookAhead"), taul::qualifier::none);
    sw.pos(10830);
    sw.name(taul::str::lit("OP_AMPERSAND"));
    sw.pos(10843);
    sw.name(taul::str::lit("Expr_NoSuffix"));
    sw.pos(10830);
    sw.close();
    sw.pos(10898);
    sw.ppr(taul::str::lit("LookAheadNot"), taul::qualifier::none);
    sw.pos(10898);
    sw.name(taul::str::lit("OP_MINUS"));
    sw.pos(10907);
    sw.name(taul::str::lit("Expr_NoSuffix"));
    sw.pos(10898);
    sw.close();
    sw.pos(10962);
    sw.ppr(taul::str::lit("Not"), taul::qualifier::none);
    sw.pos(10962);
    sw.name(taul::str::lit("OP_TILDE"));
    sw.pos(10971);
    sw.name(taul::str::lit("Expr_NoSuffix"));
    sw.pos(10962);
    sw.close();
    sw.pos(11028);
    sw.ppr(taul::str::lit("Optional_Suffix"), taul::qualifier::none);
    sw.pos(11028);
    sw.name(taul::str::lit("OP_QUESTION"));
    sw.pos(11028);
    sw.close();
    sw.pos(11081);
    sw.ppr(taul::str::lit("KleeneStar_Suffix"), taul::qualifier::none);
    sw.pos(11081);
    sw.name(taul::str::lit("OP_ASTERISK"));
    sw.pos(11081);
    sw.close();
    sw.pos(11134);
    sw.ppr(taul::str::lit("KleenePlus_Suffix"), taul::qualifier::none);
    sw.pos(11134);
    sw.name(taul::str::lit("OP_PLUS"));
    sw.pos(11134);
    sw.close();
    sw.pos(11258);
    sw.ppr(taul::str::lit("Alts"), taul::qualifier::none);
    sw.pos(11258);
    sw.name(taul::str::lit("Alt"));
    sw.pos(11281);
    sw.kleene_star();
    sw.pos(11262);
    sw.sequence();
    sw.pos(11264);
    sw.name(taul::str::lit("Alt_Divider"));
    sw.pos(11276);
    sw.name(taul::str::lit("Alt"));
    sw.pos(11262);
    sw.close();
    sw.pos(11281);
    sw.close();
    sw.pos(11258);
    sw.close();
    sw.pos(11324);
    sw.ppr(taul::str::lit("Alt_Divider"), taul::qualifier::none);
    sw.pos(11324);
    sw.name(taul::str::lit("OP_VBAR"));
    sw.pos(11324);
    sw.close();
    sw.pos(11373);
    sw.ppr(taul::str::lit("Alt"), taul::qualifier::none);
    sw.pos(11377);
    sw.kleene_star();
    sw.pos(11373);
    sw.name(taul::str::lit("Expr"));
    sw.pos(11377);
    sw.close();
    sw.pos(11373);
    sw.close();
    auto loaded = taul::load(sw.done(), lgr);
    TAUL_LOG_IF(!loaded, lgr, "TAUL fetcher 'taul' backing data didn't initialize properly!");
    return loaded.value();
}
static const taul::grammar _TAUL_SRCGEN_taul_object = _TAUL_SRCGEN_init_taul();

taul::grammar taul::fetchers::taul() noexcept {
    return _TAUL_SRCGEN_taul_object;
}
#endif